/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author lizsotomayor
 */

import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;

public class PetCatalog extends javax.swing.JFrame {

    /**
     * Creates new form PetCatalog
     */
    public PetCatalog() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        AddPetButton = new javax.swing.JButton();
        ShowButton = new javax.swing.JButton();
        RemovePetButton = new javax.swing.JButton();
        dogs = new javax.swing.JButton();
        cats = new javax.swing.JButton();
        other_pets = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Species", "Breed", "Weight", "Color", "Gender", "Allergies", "Intake Date", "Status", "Notes"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBackground(new java.awt.Color(0, 102, 51));

        AddPetButton.setText("Add Pet");
        AddPetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddPetButtonActionPerformed(evt);
            }
        });

        ShowButton.setText("Show All Pets");
        ShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowButtonActionPerformed(evt);
            }
        });

        RemovePetButton.setText("Remove Pet");
        RemovePetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemovePetButtonActionPerformed(evt);
            }
        });

        dogs.setText("Show Dogs");
        dogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dogsActionPerformed(evt);
            }
        });

        cats.setText("Show Cats");
        cats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catsActionPerformed(evt);
            }
        });

        other_pets.setText("Show Other Pets");
        other_pets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                other_petsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AddPetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(RemovePetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 305, Short.MAX_VALUE)
                .addComponent(ShowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dogs, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cats, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(other_pets)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddPetButton)
                    .addComponent(ShowButton)
                    .addComponent(RemovePetButton)
                    .addComponent(dogs)
                    .addComponent(cats)
                    .addComponent(other_pets))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(1163, 496));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void AddPetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddPetButtonActionPerformed
        new NewIntake().setVisible(true);
    }//GEN-LAST:event_AddPetButtonActionPerformed

    private void ShowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);
        String url = "jdbc:postgresql://localhost:5432/humane_society";

        String user = "postgres";
        String query = "select * from pets";
        try{
            Connection conn = DriverManager.getConnection(url, user, null);
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery(query);
            while(rs.next()){
                String petname = rs.getString("petname");
                String species = rs.getString("species");
                String breed = rs.getString("type");
                Float weight = rs.getFloat("weight");
                String color = rs.getString("color");
                String gender = rs.getString("gender");
                String allergies = rs.getString("allergies");
                String intake_date = rs.getString("intake_date");
                String status = rs.getString("status");
                String notes = rs.getString("notes");
                model.addRow(new Object[] {petname, species, breed, weight, color, gender, allergies, intake_date, status, notes});
            }
            rs.close();
            stm.close();

        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_ShowButtonActionPerformed

    private void RemovePetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemovePetButtonActionPerformed
        new DeletePetPage().setVisible(true);
    }//GEN-LAST:event_RemovePetButtonActionPerformed

    private void catsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_catsActionPerformed
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);
        String url = "jdbc:postgresql://localhost:5432/humane_society";
        String user = "postgres";
        String query = "SELECT * FROM pets WHERE species = ?";
        try{
            Connection conn = DriverManager.getConnection(url, user, null);
            PreparedStatement stm = conn.prepareStatement(query);
            stm.setString(1, "Cat");
            ResultSet rs = stm.executeQuery();
            while(rs.next()){
                String petname = rs.getString("petname");
                String species = rs.getString("species");
                String breed = rs.getString("type");
                Float weight = rs.getFloat("weight");
                String color = rs.getString("color");
                String gender = rs.getString("gender");
                String allergies = rs.getString("allergies");
                String intake_date = rs.getString("intake_date");
                String status = rs.getString("status");
                String notes = rs.getString("notes");
                model.addRow(new Object[] {petname, species, breed, weight, color, gender, allergies, intake_date, status, notes});
            }
            rs.close();
            stm.close();
            conn.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getMessage());
        }                                    
    }//GEN-LAST:event_catsActionPerformed

    private void dogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dogsActionPerformed
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);
        String url = "jdbc:postgresql://localhost:5432/humane_society";
        String user = "postgres";
        String query = "SELECT * FROM pets WHERE species = ?";
        try{
            Connection conn = DriverManager.getConnection(url, user, null);
            PreparedStatement stm = conn.prepareStatement(query);
            stm.setString(1, "Dog");
            ResultSet rs = stm.executeQuery();
            while(rs.next()){
                String petname = rs.getString("petname");
                String species = rs.getString("species");
                String breed = rs.getString("type");
                Float weight = rs.getFloat("weight");
                String color = rs.getString("color");
                String gender = rs.getString("gender");
                String allergies = rs.getString("allergies");
                String intake_date = rs.getString("intake_date");
                String status = rs.getString("status");
                String notes = rs.getString("notes");
                model.addRow(new Object[] {petname, species, breed, weight, color, gender, allergies, intake_date, status, notes});
            }
            rs.close();
            stm.close();
            conn.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_dogsActionPerformed

    private void other_petsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_other_petsActionPerformed
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);
        String url = "jdbc:postgresql://localhost:5432/humane_society";
        String user = "postgres";
        String query = "SELECT * FROM pets WHERE species NOT IN (?, ?)";
        try{
            Connection conn = DriverManager.getConnection(url, user, null);
            PreparedStatement stm = conn.prepareStatement(query);
            stm.setString(1, "Dog");
            stm.setString(2, "Cat");
            ResultSet rs = stm.executeQuery();
            while(rs.next()){
                String petname = rs.getString("petname");
                String species = rs.getString("species");
                String breed = rs.getString("type");
                Float weight = rs.getFloat("weight");
                String color = rs.getString("color");
                String gender = rs.getString("gender");
                String allergies = rs.getString("allergies");
                String intake_date = rs.getString("intake_date");
                String status = rs.getString("status");
                String notes = rs.getString("notes");
                model.addRow(new Object[] {petname, species, breed, weight, color, gender, allergies, intake_date, status, notes});
            }
            rs.close();
            stm.close();
            conn.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getMessage());
        }                                    
    }//GEN-LAST:event_other_petsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PetCatalog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PetCatalog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PetCatalog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PetCatalog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PetCatalog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddPetButton;
    private javax.swing.JButton RemovePetButton;
    private javax.swing.JButton ShowButton;
    private javax.swing.JButton cats;
    private javax.swing.JButton dogs;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton other_pets;
    // End of variables declaration//GEN-END:variables
}
